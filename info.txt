Informacion:

	Nombre: Project pets

	Git:
		Repositorio: project_pets
		URL Git: git clone https://github.com/ktosoriog/project_pets.git
		Password: ktosoriog.2024*
		
	Google (Envio de correos)
		Email: petprojectapi@gmail.com
		Password: ktosoriog.2024*
		#Configuracion de Spring
			spring.mail.username=petprojectapi@gmail.com
			spring.mail.password=zxay aaep ajwe sznm
		
	Proyectos:
	
		project_pets_backend:
		
			Versión y Dependencias:
				Spring Boot 3.4.1: Framework principal para el backend.
				Java 21: Versión del JDK configurada.
				Dependencias principales:
					Spring Boot Starter Web: Desarrollo de API REST.
					Spring Boot Starter Security: Implementación de seguridad (autenticación/autorización).
					JWT (io.jsonwebtoken): Seguridad basada en JSON Web Tokens.
					Spring Boot Starter Data JPA: Acceso a bases de datos relacionales con Hibernate.
					MySQL Connector: Conexión a la base de datos MySQL.
					Lombok: Simplificación de código boilerplate.
		
			Estructura	proyecto:
			
				project-pets-backend
				└── src
					└── main
						├── java
						│   └── co.com.pets
						│       ├── config             // Configuración del proyecto (seguridad, autenticación)
						│       │   ├── ConfigSecurity.java
						│       │   ├── CustomAuthenticationEntryPoint.java
						│       ├── constant           // Constantes globales del proyecto
						│       │   ├── MensajesConstant.java
						│       ├── controller         // Controladores para manejar solicitudes HTTP
						│       │   ├── AuthController.java
						│       │   ├── CatalogoController.java
						│       │   ├── HistoriaClinicaController.java
						│       │   ├── InventarioAdminController.java
						│       │   ├── InventarioVetController.java
						│       │   ├── MascotaAdminController.java
						│       │   ├── MascotaClienteController.java
						│       │   ├── ServicioAdminController.java
						│       │   ├── ServicioClienteController.java
						│       │   ├── ServicioVetController.java
						│       │   ├── TipoServicioClienteController.java
						│       │   ├── TipoServicioController.java
						│       │   ├── UsuarioController.java
						│       ├── dto                // Clases para transferencia de datos (DTOs)
						│       │   ├── EspecieDTO.java
						│       │   ├── HistoriaClinicaDTO.java
						│       │   ├── InventarioDTO.java
						│       │   ├── LoginRequestDTO.java
						│       │   ├── LoginResponseDTO.java
						│       │   ├── MascotaDTO.java
						│       │   ├── RazaDTO.java
						│       │   ├── ServicioDTO.java
						│       │   ├── TipoServicioDTO.java
						│       │   ├── UsuarioDTO.java
						│       ├── entity             // Entidades que representan tablas de la base de datos
						│       │   ├── Cliente.java
						│       │   ├── Especie.java
						│       │   ├── HistoriaClinica.java
						│       │   ├── Inventario.java
						│       │   ├── Mascota.java
						│       │   ├── Raza.java
						│       │   ├── Rol.java
						│       │   ├── Servicio.java
						│       │   ├── TipoServicio.java
						│       │   ├── Usuario.java
						│       ├── exception          // Manejo personalizado de excepciones
						│       │   ├── GlobalExceptionHandler.java
						│       │   ├── NoAutorizadoException.java
						│       │   ├── ObjetoNoEncontradoException.java
						│       │   ├── OperacionInvalidaException.java
						│       ├── repository         // Interfaces de acceso a la base de datos (JPA Repositories)
						│       │   ├── ClienteRepository.java
						│       │   ├── EspecieRepository.java
						│       │   ├── HistoriaClinicaRepository.java
						│       │   ├── InventarioRepository.java
						│       │   ├── MascotaRepository.java
						│       │   ├── RazaRepository.java
						│       │   ├── RolRepository.java
						│       │   ├── ServicioRepository.java
						│       │   ├── TipoServicioRepository.java
						│       │   ├── UsuarioRepository.java
						│       ├── service            // Servicios con lógica de negocio
						│       │   ├── AuthService.java
						│       │   ├── EmailService.java
						│       │   ├── EspecieService.java
						│       │   ├── HistoriaClinicaService.java
						│       │   ├── InventarioService.java
						│       │   ├── MascotaService.java
						│       │   ├── RazaService.java
						│       │   ├── ServicioService.java
						│       │   ├── TipoServicioService.java
						│       │   ├── UsuarioService.java
						│       ├── service.impl       // Implementaciones de los servicios
						│       │   ├── AuthServiceImpl.java
						│       │   ├── DetallesUsuarioService.java
						│       │   ├── EspecieServiceImpl.java
						│       │   ├── HistoriaClinicaServiceImpl.java
						│       │   ├── InventarioServiceImpl.java
						│       │   ├── MascotaServiceImpl.java
						│       │   ├── RazaServiceImpl.java
						│       │   ├── ServicioServiceImpl.java
						│       │   ├── TipoServicioServiceImpl.java
						│       │   ├── UsuarioServiceImpl.java
						│       ├── util               // Clases utilitarias (e.g., JWT)
						│       │   ├── JwtFiltro.java
						│       │   ├── JwtUtil.java
						│       │   ├── ResetTokenStore.java
						├── resources
						│   ├── META-INF
						│   ├── application.properties

		
		project_pets_frontend:
		
			Tecnologías principales:
				React 18.3.1: Biblioteca para construir interfaces de usuario.
				React Router Dom 7.1.3: Manejo de rutas en la aplicación.
				Axios 1.7.9: Realización de peticiones HTTP.
				Vite 6.0.5: Herramienta para el desarrollo y construcción de aplicaciones modernas con un tiempo de respuesta rápido.
				TypeScript 5.6.2: Tipado estático para JavaScript.
		
			Estructura proyecto:
			
				project-pets-frontend
				├── node_modules           // Dependencias del proyecto
				├── public                 // Archivos públicos accesibles desde el navegador
				├── src                    // Código fuente del proyecto
				│   ├── assets             // Recursos como imágenes y archivos estáticos
				│   │   ├── images
				│   │   │   ├── logo.png
				│   │   │   ├── logo.psd
				│   │   ├── styles
				│   │   │   ├── global.css
				│   ├── components         // Componentes reutilizables de la UI
				│   ├── context            // Contexto global de React
				│   ├── pages              // Páginas principales de la aplicación
				│   ├── router             // Configuración de rutas
				│   ├── services           // Servicios para conexión con la API
				│   ├── util               // Utilidades generales
				│   ├── App.tsx            // Componente raíz
				│   ├── main.tsx           // Punto de entrada
				│   ├── vite-env.d.ts      // Configuración de Vite
				├── .env.development       // Variables de entorno (desarrollo)
				├── .env.production        // Variables de entorno (producción)
				├── Dockerfile             // Configuración para Docker
				├── package.json           // Dependencias y configuración del proyecto
				├── tsconfig.json          // Configuración de TypeScript

		Base de datos: dbprojectpets
			Base de datos relacional mysql.
			
	Usuarios:
	
		- admin@pets.com, Password: 123456789 - Encriptado($2a$10$rKR9yfhY7FvvjvMVMs8sUu1jhWjNoiu/AhlpecpjtCBeRxZVjmNRG)
		- vet@pets.com, Password: 123456789 - Encriptado($2a$10$rKR9yfhY7FvvjvMVMs8sUu1jhWjNoiu/AhlpecpjtCBeRxZVjmNRG)
		- cliente@pets.com, Password: 123456789 - Encriptado($2a$10$rKR9yfhY7FvvjvMVMs8sUu1jhWjNoiu/AhlpecpjtCBeRxZVjmNRG)
		
	AWS
	
		URL:	https://aws-aleosp.signin.aws.amazon.com/console
		User:	aospinarosero
	
		Comandos despliegue EC2:
		
			-	URL front: http://ec2-54-80-58-58.compute-1.amazonaws.com
			-	URL front Back: http://ec2-54-80-58-58.compute-1.amazonaws.com:8080/
			-	docker compose build
			-	docker compose up -d
			-	docker compose ps
			-	docker logs project-pets-backend
			-	docker compose down
			-	docker volume rm project_pets_db_data 
			-	Comandos BD:
				-	docker exec -it project-pets-db bash
				-	mysql -u admin -p
				-	contraseña (admin123).
				-	USE dbprojectpets;
				-	SHOW TABLES